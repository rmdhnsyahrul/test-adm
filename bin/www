#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app           = require('../server')
    , debug         = require('debug')('adm-playlist-management:server')
    , http          = require('http')
    , passport      = require('passport')
    , config        = require('../config/config');

/**
 * Get port from environment and store in Express.
 */
var port = config.dev.port;
app.set('port', port);

/**
 *  Passport Middleware
 */
app.use(passport.initialize());
app.use(passport.session);

require('../config/passport')(passport);

// Mongoose Conf !
require('../config/mongoose.config')(config);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', (error) => {
  /**
   * Event listener for HTTP server "error" event.
   */
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
});
server.on('listening', () => {
  /**
   * Event listener for HTTP server "listening" event.
   */
  var addr = server.address();
  var bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
  debug('Listening on ' + bind);
  console.log('Server are listening on ' + bind);
});

function normalizePort(val) {
  /**
   * Normalize a port into a number, string, or false.
   */
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
};